function solution(reqs) {
    let log = [];
    let account = {};

    for (let i = 0; i < reqs.length; i++) {
        let command = reqs[i].split(' ');
        if (command[0] === "CREATE") {
            if (Object.keys(account).includes(command[1])) { // 이미 개설된 계좌라면?
                log.push(403);
            } else { // 개설되지 않은 계좌라면?
                let accountName = command[1];
                let accountInfo = {}
                accountInfo[accountName] = { "max": -parseInt(command[2]), "balance": 0 }; // -최대한도까지 출금할 수 있는 계좌와 0원의 잔액 생성
                Object.assign(account, accountInfo);
                log.push(200);
            }
        }
        else if (command[0] === "DEPOSIT") {
            if (Object.keys(account).includes(command[1])) { // 이미 존재하는 계좌라면?
                accoundInfo[command[1]].balance += parseInt(command[2]);
                log.push(200);
            } else { // 존재하지 않는 계좌라면
                log.push(404);
            }
        }
        else if (command[0] === "WITHDRAW") {
            if (Object.keys(account).includes(command[1])) { // 이미 존재하는 계좌라면?
                if (account[command[1]].max + parseInt(command[2]) <= 0) {
                    account[command[1]].max += parseInt(command[2]);
                    log.push(200);
                } else { // 계좌는 있지만, 최대한도를 초과한다면 출금하지 않음
                    log.push(403);
                }
            } else { // 존재하지 않는 계좌라면
                log.push(404);
            }
        }

    }
    // console.log(account)
    // console.log(Object.keys(account[0]).include("3a"))
    return log;
}

// 계좌 개설, 입금, 출금을 처리하는 은행 서버를 구현하려고 한다.
// 은행 서버는 들어온 요청을 처리한 후, 요청을 처리한 방법에 따라 상태 코드를 보내주어야한다.

// 계좌 개설 요청 CREATE 계좌 아이디 최대한도
// 이미 개설된 계좌라면 403, 개설되지 않은 계좌라면 -최대한도까지 출금할 수 있는 계좌를 개설 후 200 코드

// 입금 요청 DEPOSIT 계좌아이디 금액
// 없는 계좌라면 404코드, 있는 계좌라면 금액 만큼을 입금한 후 200 코드

// 출금 요청 WITHDRAW 계좌아이디 금액
// 없는 계좌라면 404 코드, 계좌가 있지만 최대한도를 초과한다면 출금을 하지 않고 403코드
// 그 외에는 금액만큼 출금 후 200 코드